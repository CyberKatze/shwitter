/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  FilterInputType: { // input type
    emailFilter?: string | null; // String
    skip?: number | null; // Int
    take?: number | null; // Int
    userId?: number | null; // Int
    usernameFilter?: string | null; // String
  }
  ProfileInput: { // input type
    avatar?: string | null; // String
    bio?: string | null; // String
    location?: string | null; // String
    name: string; // String!
    website?: string | null; // String
  }
  ShweetOrderByInput: { // input type
    content?: NexusGenEnums['Sort'] | null; // Sort
    createdAt?: NexusGenEnums['Sort'] | null; // Sort
  }
}

export interface NexusGenEnums {
  Sort: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AllUsers: { // root type
    count: number; // Int!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Feed: { // root type
    count: number; // Int!
    shweets: NexusGenRootTypes['Shweet'][]; // [Shweet!]!
  }
  LikedShweet: { // root type
    likedAt: NexusGenScalars['DateTime']; // DateTime!
    shweetId: number; // Int!
    userId: number; // Int!
  }
  Mutation: {};
  Profile: { // root type
    avatar?: string | null; // String
    bio?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    location?: string | null; // String
    name?: string | null; // String
    userId: number; // Int!
    website?: string | null; // String
  }
  Query: {};
  Shweet: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AllUsers: { // field return type
    count: number; // Int!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Feed: { // field return type
    count: number; // Int!
    shweets: NexusGenRootTypes['Shweet'][]; // [Shweet!]!
  }
  LikedShweet: { // field return type
    likedAt: NexusGenScalars['DateTime']; // DateTime!
    shweet: NexusGenRootTypes['Shweet'] | null; // Shweet
    shweetId: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  Mutation: { // field return type
    deleteShweet: NexusGenRootTypes['Shweet']; // Shweet!
    editProfile: NexusGenRootTypes['Profile'] | null; // Profile
    like: NexusGenRootTypes['LikedShweet'] | null; // LikedShweet
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    shweet: NexusGenRootTypes['Shweet']; // Shweet!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateShweet: NexusGenRootTypes['Shweet']; // Shweet!
  }
  Profile: { // field return type
    avatar: string | null; // String
    bio: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    location: string | null; // String
    name: string | null; // String
    userId: number; // Int!
    website: string | null; // String
  }
  Query: { // field return type
    allUsers: NexusGenRootTypes['AllUsers']; // AllUsers!
    feed: NexusGenRootTypes['Feed']; // Feed!
    me: NexusGenRootTypes['User'] | null; // User
  }
  Shweet: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    likedShweet: NexusGenRootTypes['LikedShweet'][]; // [LikedShweet!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    shweets: NexusGenRootTypes['Shweet'][]; // [Shweet!]!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AllUsers: { // field return type name
    count: 'Int'
    users: 'User'
  }
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Feed: { // field return type name
    count: 'Int'
    shweets: 'Shweet'
  }
  LikedShweet: { // field return type name
    likedAt: 'DateTime'
    shweet: 'Shweet'
    shweetId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Mutation: { // field return type name
    deleteShweet: 'Shweet'
    editProfile: 'Profile'
    like: 'LikedShweet'
    login: 'AuthPayload'
    shweet: 'Shweet'
    signup: 'AuthPayload'
    updateShweet: 'Shweet'
  }
  Profile: { // field return type name
    avatar: 'String'
    bio: 'String'
    createdAt: 'DateTime'
    location: 'String'
    name: 'String'
    userId: 'Int'
    website: 'String'
  }
  Query: { // field return type name
    allUsers: 'AllUsers'
    feed: 'Feed'
    me: 'User'
  }
  Shweet: { // field return type name
    author: 'User'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    likedShweet: 'LikedShweet'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    profile: 'Profile'
    shweets: 'Shweet'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteShweet: { // args
      id: number; // Int!
    }
    editProfile: { // args
      data: NexusGenInputs['ProfileInput']; // ProfileInput!
    }
    like: { // args
      shweetId: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    shweet: { // args
      content: string; // String!
    }
    signup: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
      username: string; // String!
    }
    updateShweet: { // args
      content: string; // String!
      id: number; // Int!
    }
  }
  Query: {
    allUsers: { // args
      data?: NexusGenInputs['FilterInputType'] | null; // FilterInputType
    }
    feed: { // args
      filter?: string | null; // String
      orderBy?: NexusGenInputs['ShweetOrderByInput'][] | null; // [ShweetOrderByInput!]
      skip?: number | null; // Int
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}